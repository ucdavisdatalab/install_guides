[["index.html", "UC Davis DataLab Install Guides Overview", " UC Davis DataLab Install Guides UC Davis DataLab 2022-09-07 Overview These guides will walk you through installing some of the most common data science tools used at the UC Davis DataLab and beyond. Use the sidebar on the left to navigate to the category of programs you would like to install. If you are taking a class or workshop using these tools, please install them prior to attending. The workshop information should tell you what software you need. These guides are not intended to tech you how to use these pieces of software. Rather they are just meant to get you in a spot to attend other trainings. Contributions This guide is maintained by the UC Davis DataLab community, and is open for contribution. See how you can contribute on the Github repo. This toolkit has been made possible thanks to contributions by: Carl Stahmer Jared Joseph Cameron Riddell Nicholas Alonzo Charlie Fornaca "],["command-line-tools.html", "1 Command Line Tools 1.1 Git 1.2 Windows Subsystem for Linux (Ubuntu)", " 1 Command Line Tools 1.1 Git 1.1.1 Introduction Git is a ubiquitous software for version control. Version control describes a process of storing and organizing multiple versions (or copies) of documents that you create. Approaches to version control range from simple to complex and can involve the use of various human workflows and/or software applications to accomplish the overall goal of storing and managing multiple versions of the same document(s). Most people have a folder/directory somewhere on their computer that looks something like this: Or perhaps, this: This is a rudimentary form of version control that relies completely on the human workflow of saving multiple versions of a file. This system works minimally well, in that it does provide you with a history of file versions theoretically organized by their time sequence. But this filesystem method provides no information about how the file has changed from version to version, why you might have saved a particular version, or specifically how the various versions are related. This human-managed filesystem approach is more subject to error than software-assisted version control systems. It is not uncommon for users to make mistakes when naming file versions, or to go back and edit files out of sequence. Software-assisted version control systems such as Git were designed to solve this problem. If you would like more information on how Git works, read more in the Git Book for free. 1.1.2 Git on Windows Follow these step-by-step instructions if you’re installing Git on a Windows machine: First, launch a web browser, the image below shows the Microsoft Edge browser: Next, navigate to the following Git download URL in your browser https://git-scm/com/downloads: Select “Windows” from the Downloads portion of the Git webpage. Git will display the following page and automatically being downloading the correct version of the Git software. If the download doesn’t start automatically, click on the “Click here to download manually link”: When the download is complete, open/Run the downloaded file (will look different in different browsers, but everyone should know how to do this): A screen will appear asking for permissions for the Git application to make changes to your device. Click on the Yes button: Click Next to accept the user license: Leave the default “Destination Location” unchanged (usually C:\\Program Files\\Git) and hit Next You will see a screen like the one below asking you to “Select Components”: Leave all of the default components selected and also check the boxes next to “Additional Icons” and it’s sub-item, “On the Desktop”. Your completed configurations window should have the following components selected: Additional Icons -&gt; On the Desktop Windows Explorer integration -&gt; Git Bash Here -&gt; Git GUI Here Git LFS (Large File Support) Associate .git* configuration files with default text editor Associate .sh files to be run with Bash And should look like this: After verifying that you have the necessary components selected as per above, hit Next. The next screen will ask you to “Select a Start Menu Folder.” Keep the default value of Git and hit Next: Leave the default “Use Vim (the ubiquitous text editor) as Git’s default editor” selected on the “Choosing the default editor used by Git” screen and hit Next: On the next screen, leave the default “let Git decide” option selected and hit Next: Leave the default “Git from the command line and also from 3rd-party software” selected and hit Next: On the next “Choosing HTTPS transport backend” page leave the default “Use the OpenSSL library” option selected and hit Next: Leave the default “Checkout Windows-style, commit Unix-style line endings” selected on the next page and hit Next: Keep the default “Use MinTTY (the default terminal of MSYS2)” selected on the “Configuring the terminal emulator to use with Git Bash” window and hit Next: Keep the default value of “Default (fast-forward or merge)” on the “Choose the default behavior of ‘git pull’” page and hit Next: Keep the default value of “Git Credential Manager Core” on the “Choose a credential helper” page and hit Next: Keep the default values on the “Configuration extra options” page by keeping “Enable file system caching” checked and “Enable symbolic links” unchecked and then hit Next: Make sure that no options are checked in the “Configuring experimental options” page and hit Install: After you hit this Install button as per above, you will see an install progress screen like the one below: When the install is complete, a new, “Completing the Git Setup Wizard” window like the one below will appear: Make sure that all of the options on this window are unchecked as in the image below and then hit the Finish button: This will complete your installation process. Windows users should verify that when downloading Git for Windows they have also installed Git Bash, which is necessary for working with Git in command line. 1.1.3 Git on Mac If you are installing Git on a Mac, there is no extra configuration. Simply go the Git download page at https://git-scm.com/downloads and choose the latest version for Mac, and run the installer package when it is finished downloading. If you get an “unknown developer” warning during the install process, follow the instructions at the beginning of the video at https://www.youtube.com/watch?v=__kr-Ew5kbE to help you work through this problem. 1.1.4 Verifying your install Whether you’re installing on Windows or Mac, note that unlike most applications that you’ve installed before, you will not find a “Git” application in your programs or applications directory once the installation is complete. As long as you don’t get an explicit error message during the installation process, you can assume that the software was successfully installed. Git is a command-line application with which you interact using the command-line. If you’re already familiar with using command line, you can verify your install by opening the terminal (for Windows that will be Git Bash in your programs menu) and type git --version. You should then see a response of your installed version (e.g., git version 2.12.2.windows.2, or git version 2.12.2.mac.2), and not the error “command not found.” 1.1.5 Installation troubleshooting If you are not able to successfully install Git on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 1.2 Windows Subsystem for Linux (Ubuntu) 1.2.1 Introduction Windows now has the ability to install a Linux operating system on your machine without the use of an emulator. This gives you a full-featured linux environment that can interact with your normal files. 1.2.2 Check your windows version First, please check the build version of Windows that you are using. This can be done by selecting the Windows logo key + r on your keyboard. Once you do that, you should see the windows Run prompt: Type the command “winver” (no quotes) into the prompt, as depicted in the image above, and hit enter. You should see a screen similar to this: Your build version number is the one that follows the “Windows Build” text (as highlighted in the above image). Depending on whether your build number is larger or smaller than 19041, please follow the appropriate directions below: Larger than (or equal to) 19041 Smaller than 19041 1.2.2.1 Windows version larger than (or equal to) 19041 In the start menu, search for “Powershell”, right click and select “run as administrator”. A small blue window should open with a flashing cursor. Please type wsl --install and hit enter: This will take a few minutes to install everything. Once it is finished, please skip to verifying your install. If the above installation did not work- please try to install using these instructions (even if your version is not smaller than 19041). 1.2.2.2 Windows version larger smaller than 19041 In the start menu, search for “Turn Windows features on or off” and open that settings window. In the settings window, scroll down to “Windows Subsystem for Linux”, check the box next to it, and select OK at the bottom of the window. You will not need to restart your computer. Once you have rebooted, open the Windows Store from the start menu. In the Windows Store, search for Ubuntu, and select the version-less one unless you have a reason to pick a specific version. On the Ubuntu page, select Get to install. 1.2.3 Verifying your install In the start menu, search for and run Ubuntu. If a terminal window opens, you should be good to go! 1.2.4 Installation troubleshooting If you are not able to successfully install the Linux Subsystem for Windows on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. "],["r-and-r-tools.html", "2 R and R Tools 2.1 R/RStudio 2.2 R Packages 2.3 R Tools", " 2 R and R Tools 2.1 R/RStudio 2.1.1 Introduction “R” is both a free and open source programming language designed for statistical computing and graphics, and the software for interpreting the code written in the R language. RStudio is an integrative development environment (IDE) within which you can write and execute code, and interact with the R software. It’s an interface for working with the R software that allows you to see your code, plots, variables, etc. all on one screen. This functionality can help you work with R, connect it with other tools, and manage your workspace and projects. You cannot run RStudio without having R installed. While RStudio is a commercial product, the free version is sufficient for most researchers. Why learn R? There are many advantages to working with R. Scientific integrity. Working with a scripting language like R facilitates reproducible research. Having the commands for an analysis captured in code promotes transparency and reproducibility. Someone using your code and data should be able to exactly reproduce your analyses. An increasing number of research journals not only encourage, but are beginning to require, submission of code along with a manuscript. Many data types and sizes. R was designed for statistical computing and thus incorporates many data structures and types to facilitate analyses. It can also connect to local and cloud databases. Graphics. R has built-in plotting functionalities that allow you to adjust any aspect of your graph to effectively tell the story of your data. Open and cross-platform. Because R is free, open-source software that works across many different operating systems, anyone can inspect the source code, and report and fix bugs. It is supported by a large community of users and developers. Interdisciplinary and extensible. Because anyone can write and share R packages, it provides a framework for integrating approaches across domains, encouraging innovation. 2.1.2 R/RStudio on Windows Follow these step-by-step instructions to install R and RStudio on a Windows machine: First open your internet browser of choice, and navigate to https://www.r-project.org/. Click on download R. On the following page, select the link under whatever location is closest to you for the best download speed (though any will work). Next, click the Download R for Windows link. Click on the link base to go to the download page. Finally, click Download R X.X.X for Windows to download the installer. When the download is complete, run the R installer. This will look slightly different depending on your browser. Select your language and then accept the license agreement by hitting Next &gt;. Leave the default install location and select Next &gt;. If you know what kind of machine you are on, you can specify if you want the 32 or 64 bit version of R. If you do not know, it is safe to install both. Keep the default startup options and hit Next &gt;. You most likely will not want an R shortcut on your desktop, as you will almost certainly use RStudio as an interface. You can still have one if you would like. Otherwise, accept the defaults and hit Next &gt;. Wait for the instillation to complete. Once it is done, hit Finish. You’ve now installed R! However, we still need to install RStudio separately. Navigate to the RStudio homepage at https://rstudio.com/ and click the download button. Scroll down and select the free version to download. If you are using RStudio for commercial purposes you will need to look into RStudio’s licensing terms to see if you need to pay for the pro version. Download the RStudio installer for your machine. Run the installer just as you did for the R download. 2.1.3 Updating R/RStudio on Windows Over time updates to R and R Studio will necessitate and update. Packages you use may not update with R! If you rely heavily on a package for a project, it is highly recommended you save your current configuration of R and R Studio before updating. If there was a major version change, you will also need to re-install all of your packages. Upgrading R and R Studio follows the same process as installing it in the first place. You can simply install the new versions on your machine. As long as you do not remove the old instances of R as part of this process, you would be able to revert to a previous version. 2.1.4 R/RStudio on Mac If you are installing R/RStudio on a Mac, there is no extra configuration. Simply go the download pages for R and RStudio and choose the latest version for mac. Run the installer package when it is finished downloading. If you receive an error regarding the app being from an unidentified developer, please follow the instructions here. 2.1.5 Verifying your install Once you have installed both R and RStudio, you should be able to run RStudio on your machine. You can verify your install is working by opening RStudio and typing paste(\"Hello World!\") into the console as shown below. If the code runs you should see a response that says [1] Hello World!. If that works you are all set! 2.1.6 Installation troubleshooting If you are not able to successfully install R/RStudio on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 2.2 R Packages 2.2.1 Introduction R packages are community made functions that automate or expand the things you can do in the R language. The process for installing them is largely the same for both Windows and Mac. There are three main methods for installing R packages. You can install them from the Comprehensive R Archive Network (CRAN) from within R, from another online source like Github, or from files on your local machine. We will cover each of these methods here. 2.2.2 Packages from CRAN The vast majority to packages in R can be installed from CRAN. You will need the name of the package you want to install. Once you have the name (case sensitive!), you can download it from within R using the install.packages() function in the R console. For example, if you wanted to install the skimr package, you would enter install.packages(\"skimr\"). Note that you do need to put the package name in quotes, and that it is case sensitive. You can install multiple packages at a time by passing a vector of package names to install.packages(), for example: install.packages(c(\"skimr\", \"corrplot\")). You can test if the packages installed correctly by calling it in R using the library() function. 2.2.3 Packages from Github Not all packages are available on CRAN, especially very new or very old packages. For these you will most likely need to install them from an online repository, the most common of which is Github. There are some R packages that make this process easy. We will use the remotes package. First install the remotes package by running install.packages(\"remotes\") in the R console. If it installed correctly, you will see package ‘remotes’ successfully unpacked and MD5 sums checked. Once remotes is installed, you can install packages directly from an online repository. We will use remotes’s install_github() function to demonstrate. Let’s try installing the handy wordcountaddin for RStudio. First navigate to the package page on Github: https://github.com/benmarwick/wordcountaddin. Most packages that need to be installed from an online source will give you the code to do so in the readme of their repository. Another common package for installing from online repositories is called devtools, but this package contains many other functions we don’t need for this task. You can replace devtools with remotes almost all of the time. For our case, type remotes::install_github(\"benmarwick/wordcountaddin\", type = \"source\", dependencies = TRUE) into the console and hit enter. You may be asked if you would like to update other packages. Enter 1 to try and update all. If this doesn’t work, you can enter the command again and try 3 to ignore these updates. Read the resulting install output. As long as it does not indicate anything failed to install, you’re done! You can now use the helpful wordcountaddin! You can find it in the Addins dropdown above the editor pane. 2.2.4 Packages from Local Source On occasion it will be necessary to install an R package from a local source .tar.gz file. You would need to download this file yourself, then install it. For example, let’s download then install the mgcv package from https://cran.r-project.org/web/packages/mgcv/index.html. First navigate to that page, and click on the download link next to package source. Once the .tar.gz file is downloaded, leave it as it is, do not decompress it. Instead, find the file on your system and take note of it’s location. On Windows you can shift-right click on it, then select Copy as path. In your R console, type in install.packages(\"path/to/your/source_file.tar.gz\", repos = NULL, type = \"source\"). R will start installing the package from the local copy. Two things to note for Windows users: You will need to have installed R tools on your machine. There is a guide for that lower in this document. If you are on windows, you will need to make sure your file path uses forward slashes (/) rather than back slashes (\\). 2.3 R Tools 2.3.1 Introduction R Tools is a bundle of programs on Windows that allows R to build packages from local source files, rather than installing through CRAN. The vast majority of the time this is unnecessary, but some circumstances require it. Mac users do not need to install R Tools. 2.3.2 RTools on Windows First, navigate to the R tools website at https://cran.r-project.org/bin/windows/Rtools/. Scroll down to the download links and select the rtoolsXX-x86_64.exe link. Once the download has finished, run the R tools installer. On the first page of the installer, select a custom location if you would like, but otherwise press Next &gt;. Leave the defaults for the additional tasks and hit Next &gt;. On the next page, hit the install button and wait for it to complete. One the install is done, press Finish. You’re not done yet though! In order for R to make use of R tools, you need to add it to the PATH that R looks for tools on. To do this, open R or R Studio and type writeLines('PATH=\"${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}\"', con = \"~/.Renviron\") in the console and press enter. 2.3.3 Verifying your install To verify R tools was installed successfully, first restart R to assure you are in a clean environment. You can do this by closing and re-opening your R or RStudio window. Afterwards, type Sys.which(\"make\") (case sensitive!) into the console. If you see \"C:\\\\rtools40\\\\usr\\\\bin\\\\make.exe\" as a result you are all good! 2.3.4 Installation troubleshooting If you are not able to successfully install R Tools on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. "],["python-and-python-tools.html", "3 Python and Python Tools 3.1 Anaconda (Python) 3.2 JupyterLab 3.3 Python Modules", " 3 Python and Python Tools 3.1 Anaconda (Python) 3.1.1 Introduction Anaconda is a pre-built environment manager for python. These environments let you keep several separate installations of Python on your machine, negating the risk of module versions and incompatibilities ruining your project. The environment are also easily exportable, letting you to easily share them with collaborators. 3.1.2 Anaconda on Windows To install Anaconda on Windows, first navigate to their site, select products, then individual edition. Scroll down on this page and near the bottom you will be able to select your preferred download (or click the download button). Most modern Windows computers can make use of the 64-Bit installer. Once the download has finished, run the executable. The setup will walk you through the process of installing Anaconda on your computer. First hit the Next button. On the following screen hit I Agree. Next choose whether you want to install Anaconda for everyone, or just yourself. This doesn’t matter if you are the only one that uses your computer. Select where you would like to install Anaconda. In most cases the default is fine. On the Advanced Option page, it is recommended you leave both these options unchecked unless you have a reason not to. Hit Install! Anaconda will then start installing on your system. When it is finished, press Next. One the next page it will prompt you to download PyCharm. PyCharm is an interactive environment some use to write their Python code. You do not need to install this now. Press Next to continue. On the next page you can choose to view tutorials if you would like, but your install is completed! 3.1.3 Anaconda on Mac To install Anaconda on Mac, first navigate to their site, select products, then individual edition. Scroll down on this page and near the bottom you will be able to select your preferred download (or click the download button). For Mac, select the graphical 64-Bit installer. Once the download has finished, run the executable. You will need to select OK to agree to the license, and to allow Anaconda-Nagivator access to control Terminal. 3.1.4 Verifying your install To verify Anaconda is working on your system, launch the Anaconda Navigator from your programs menu. This should start the main navigator window seen below. From here, click on the Environments tab in the left sidebar. On the next screen, mouse over an environment and press the play button, and select Open with Python. If this is your first time using Python, you may only see one environment called base (root) in the environments pane. If a Python window successfully launches, you should be good to go! 3.1.5 Installation troubleshooting If you are not able to successfully install Anaconda on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 3.2 JupyterLab 3.2.1 Introduction Jupyter Notebooks are a common interactive development environment for python, and they can also run R code. If you are familiar with R Studio notebooks, they operate in a similar fashion. Jupyter notebooks run by hosting a web server on your computer, then letting you connect to it through an internet browser. 3.2.2 Jupyter from the terminal Regardless of your operating system, the easiest way to install jupyter notebooks is from the terminal. If you are using Anaconda (see the guide in this reader), you can start a terminal by opening the Anaconda Navigator, going to the environments tab, and launching a terminal window using the “Open Terminal” option in your chosen environment. If you are not using Anaconda, start a terminal window and activate an environment of your choice, typically using conda or venv. Once activated, enter conda install -c conda-forge jupyterlab if on conda, or pip install jupyterlab otherwise. It will ask for confirmation that you want to install the listed components. Input Y and press enter to continue. The terminal will then start downloading and installing all the components, this can take some time. once it has finished you can start jupyter by entering jupyter-lab. Your terminal will start hosting a jupyter lab instance, and should open a tab in your preferred browser. You will not be able to use this terminal for other purposes while jupyter is running, but you can always start another. If a tab does not auto start, you can use the provided links in the terminal to open one. 3.2.3 Verifying your install If you can open jupyter lab in a tab, you should be all set! 3.2.4 Installation troubleshooting If you are not able to successfully install Jupyter Notebooks on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 3.3 Python Modules 3.3.1 Introduction Python modules are extensions to the basic capabilities of Python. You can install modules from the terminal where you call Python. The same process will apply regardless of your operating system. 3.3.2 Installing Modules using Conda If you are using Anaconda, it is recommended you install modules from conda sources to ensure compatibility. First, start a terminal using the Python environment you want to install the module in. (Optional) If you are using Anaconda, use the Anaconda Navigator to launch a terminal of your chosen environment. Once you are in the terminal of your chosen environment, you can install any module you know the name of using conda install &lt;module name&gt;. conda will then search its repositories for a module matching the name you provided. Note that if you are looking for a module Python said was missing in an error code, it may not be the same name you need to use when installing! You will need to search online if the install fails because it says there is no module of that name. 3.3.3 Installing Modules using Pip If you are not using conda, or conda could not find a module, you will need to use pip to install modules. First, start a terminal using the Python environment you want to install the module in. Once you are in the terminal of your chosen environment, you can install any module you know the name of using pip install &lt;module name&gt;. pip will then search its repositories for a module matching the name you provided. Note that if you are looking for a module Python said was missing in an error code, it may not be the same name you need to use when installing! You will need to search online if the install fails because it says there is no module of that name. 3.3.4 Verifying your install Regardless of your installation method, you can test if a module was successfully installed by doing the following. First, activate Python by entering python in the terminal which is in the environment you installed the module into. You know you are in python if you see the welcome message and your input changes into &gt;&gt;&gt;. Once you have activated python, you can test if your module was installed by trying to import it. To import a module enter import &lt;module name&gt; in Python. If you did not get an error, your module is successfully installed! You can also give modules an alias when importing for easier use. 3.3.5 Installation troubleshooting If you are not able to successfully install OpenRefine on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. "],["sql-and-database-tools.html", "4 SQL and Database Tools 4.1 DBeaver (SQL Database Viewer) 4.2 DB Browser 4.3 SpatiaLite GUI 4.4 SQLiteStudio", " 4 SQL and Database Tools 4.1 DBeaver (SQL Database Viewer) 4.1.1 Introduction DBeaver is a free and open source tool to inspect and manipulate databases of nearly any type. It has versions for Windows, Mac, and Linux. This can offer a more intuitive method for people new to databases to interact with their data, and create code to query data for other uses. Note that DBeaver does not create a database, it only allows you to view and interact with one. 4.1.2 DBeaver on Windows First navigate to the download page on DBeaver’s website. Scroll down and click on the installer link to download it. After the install finishes, click on the executable to launch the installer. Once you select your language, the installer will prompt you to close all other applications, and hit next. On the following page, accept the license agreement by clicking I Agree. On the next page, select if you would like to install DBeaver for all users on your machine, or just you. In most cases it is fine to install for everyone. Depending on your selection, the installer may need to re-start with administrator privileges. Enter your previous options again until you reach the “Choose Components” page. Once here, you can leave the default settings and click Next. The next page will ask where you would like to install DBeaver. The default location should work for most people, click Next to continue. The same is the true of the next page regarding the start menu location, you can click Install to start the installation process. Once the installation is complete, you can click Finish to exit the installer. 4.1.3 DBeaver on Mac 4.1.4 Installation troubleshooting If you are not able to successfully install DBeaver on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 4.2 DB Browser 4.2.1 Introduction DB Browser is an ultra lightweight viewer for SQLite databases. It is made to allow those familiar with spreadsheets to work more easily with the common SQLite format. However, that is all that it does; you cannot use it on other database types. 4.2.2 DB Browser on Windows First head to the DB Browser download page, and select the version that matches your system. On Windows this is most likely the 64-bit standard installer. Once the download has finished, start the installer from the browser or your download location. Once you have started the installer, press the Next button to continue. On the next screen, accept the license agreement and press Next. The following page will ask you if you would like to place shortcuts anywhere. Desktop will place icons on your desktop, while Program Menu will add options to your right click menu. You can choose to have these if you wish, I will not. Press Next once you have decided. On the following screen, you will be asked to select what components you want to install and where. You can safely keep the defaults and continue. Press Install on the following page. One the installation is complete, you can press Finish to close the installer! 4.2.3 Verifying your install To test everything is working launch DB Browser from the windows menu or from the install location (C:\\Program Files\\DB Browser for SQLite by default). 4.2.4 Installation troubleshooting If you are not able to successfully install DBeaver on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 4.3 SpatiaLite GUI 4.3.1 Introduction SpatiaLite GUI is a free, open-source tool for storing and working with spatial data in a SQLite database. 4.3.2 SpatiaLite GUI on Windows First navigate to the SpatiaLite download page, and look for “MS Windows binaries.” Look for the version title “previous stable version” and click the link that matches your machine (most likely 64bit)1. On the following page, click the link to download spatialite_gui-NG-X.X.X-win-amd64.7z. Once it has finished downloading, open the 7-zip archive from yuor browser or your download location. You will need 7-zip installed to open this archive. If you do not already have it installed, please see our guide on installing 7-zip in out “other Software” guide. Once the archive is open, simply drag the containing folder to your desktop or other location of choice. You can now run SpatiaLite by opening the folder, and running the spatialite_gui executable, no instillation needed. 4.3.3 Verifying your install If SpatiaLite launches when you try to run it, you’re all set! 4.3.4 Installation troubleshooting If you are not able to successfully install DBeaver on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 4.4 SQLiteStudio 4.4.1 Introduction SQLiteStudio is a free, open source, multi-platform desktop application for browsing and editing SQLite database files. 4.4.2 SQLiteStudio on Mac Navigate to the download page on SQLiteStudio’s website and click Download. Once the download finishes, click the .dmg file. Drag and drop the SQLiteStudio app to your Applications folder or other location of choice. Double-click the SQLiteStudio app and it will open to its home screen. 4.4.2.1 Troubleshooting If you receive the warning message, “SQLiteStudio cannot be opened because the developer cannot be verified.” Click Cancel. Right click the SQLiteStudio app and click Open. Mac will prompt, “Are you sure you want to open it?” Click Open and SQLiteStudio will open to its home screen. 4.4.3 SQLiteStudio on Windows 10 Navigate to the download page on SQLiteStudio’s website and click Download. Once the download finishes, click the .zip folder. Click Extract all in File Explorer and select your Desktop to extract the files to or other location of choice. The files will be extracted into a folder named SQLiteStudio. Click into the SQLiteStudio folder and find SQLiteStudio.exe. Double-click SQLiteStudio.exe and it will open to its Home Screen. "],["other-data-tools.html", "5 Other Data Tools 5.1 7zip 5.2 OpenRefine 5.3 Qgis 5.4 Tesseract 5.5 Synthetic Data Vault", " 5 Other Data Tools 5.1 7zip 5.1.1 Introduction 7-zip is a free, open source, and cross-platform compression program. It can compress and unpack several formats with varying security and compression levels. 5.1.2 7-zip on Windows First navigate to the 7-zip download page and download the file for your version of Windows (most likely 64-bit). Once it is done downloading, start the installer from your browser or downloads folder. 7-zip will ask where you would like to install it, the default is fine. Press the Install button to continue. 5.1.3 Verifying your install To verify your instaliation, run “7-zip File Manager” from your start menu. If it opens, you’re all set! You can also now call 7-zip from the right-click context menu (may require restart). 5.1.4 Installation troubleshooting If you are not able to successfully install OpenRefine on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 5.2 OpenRefine 5.2.1 Introduction OpenRefine is an open source tool used to clean and pre-process messy data. While most people are familiar with data cleaning in their coding tool of choice (R, Python, Julia, etc.), OpenRefine is designed to provide powerful cleaning capabilities with minimal overhead. One of the most helpful capabilities of OpenRefine is the ability to check for possible duplicates and misspellings of text data using its text facet tools. 5.2.2 OpenRefine on Windows Open your web browser of choice and navigate to the OpenRefine homepage at https://openrefine.org/. Click on the download button in the left sidebar. On the download page, scroll to the latest version of OpenRefine and select the Windows kit. If you are unsure if you have Java installed on your system, choose the Windows kit with embedded Java instead. Once the download has completed, open the zip and move the contents to a convenient location on your computer. Open the resulting directory, and double click on the openrefine.exe executable. The OpenRefine executable will start a terminal window, and shortly after launch a tab in your default web browser with the OpenRefine interface. 5.2.3 OpenRefine on Mac If you are installing OpenRefine on a Mac, there is no extra configuration. Simply go the download page for OpenRefine and choose the latest version for mac. Run the installer package when it is finished downloading. If you receive an error regarding the app being from an unidentified developer, please follow the instructions here. 5.2.4 Verifying your install To verify everything is working, first start OpenRefine. It will open a page in your browser of choice that resembles the following. Click the Choose Files button, and enter this dataset (you can just put in the URL). Click Next. OpenRefine will load in the data and present you with a preview. The defaults should be fine. Click Create Project in the upper right hand corner. You will then be presented with the OpenRefine working area. Click the arrow next to the What sector ... column and select Facet -&gt; Text facet. In the left hand menu, click the Cluster button. In the following menu, for method select nearest neighbor. OpenRefine will look through that column for any strings that are similar, and show you. This can be helpful for finding typos. Here, we see there are two misspellings of “Academia”. Click the Check-box in the Merge? column, then select Merge Selected &amp; Close. OpenRefine will change all strings in the Values in Cluster column to match the New Cell Value. If that all worked, OpenRefine is working! 5.2.5 Installation troubleshooting If you are not able to successfully install OpenRefine on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 5.3 Qgis Qgis is a free and open source geospatial software suite. It can be used for geospatial analysis and cartography. It also features a rich development community, with Python based addons that extend the core functionality. 5.3.1 Qgis on Windows First visit the download page for Qgis and select the version for your machine. This will most likely be the 64-bit version. Once the download has finished, launch the installer from your browser or downloads folder. On the first page of the installer, select “Express Desktop Install” and press Next. When prompted what components you would like to install, keep the default. The installer may say you have unmet dependencies. If this is the case, install them as well and accept the license agreements. It will then start to download the required components. Once the download is complete, it will start to install. If this is the first time you are installing Qgis, it will stop on the last page telling you it is finished. If you are updating an installation, it will close silently once it finishes. 5.3.2 Verifying your install Launch Qgis from your programs menu. If the main page comes up, you should be good! 5.3.3 Installation troubleshooting If you are not able to successfully install OpenRefine on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 5.4 Tesseract 5.4.1 Introduction Tesseract is Google’s open source tool for Optical Character Recognition (OCR). It is used to convert images of text into usable textual data. This can be a very difficult task for computers, and will often result in some amount of errors. Nevertheless, significant progress has been made in recent years, and it is a very useful tool to have. Tesseract is often called by other programming languages such as R or Python to perform OCR tasks. 5.4.2 Tesseract on Windows Tesseract is natively a Linux tool, but community maintained ports exist for Windows. We will be using the binaries prepared by the Mannheim University Library (UB Mannheim) to install Tesseract today. First head to their github page and scroll down to “The latest installers can be downloaded here.” Download the version that matches your machine (most likely 64 bit). Once the download has finished, launch the installer from your browser or downloads folder. Once the installer has started, select your language and continue to the second page by pressing Next &gt;. Accept the license agreement by pressing I Agree. On the following page, select if you would like to install Tesseract for everyone on the computer, or just yourself. On the following page you will choose what languages you want to be able to run OCR on. If you plan to run OCR on anything other than American English, you must select them here. “Additional script data” works for handwriting, and “Additional language data” works for printed material. I recommend you just install everything unless space is an issue. It will increase the install size from ~300mb to ~900mb. On the next page, select where you will be installing Tesseract. You should leave it as the default unless you have a very good reason not to and know how to re-assign path variables on your machine. Continue on until the installer finishes. 5.4.3 Verifying your install To verify Tesseract was installed correctly, open your Windows menu and launch Windows PowerShell. In the resulting window, copy the following command and press enter: &amp; \"C:\\Program Files\\Tesseract-OCR\\tesseract.exe\" --help-extra. If you see the help message, you are all set! 5.4.4 Installation troubleshooting If you are not able to successfully install OpenRefine on your own, please attend DataLab’s Virtual Office Hours. Click here for more information and to receive a Zoom link. 5.5 Synthetic Data Vault This section will provide you with basic guidance for using the Synthetic Data Vault (SDV) Python library for generating synthetic data to augment your already-existing datasets. 5.5.1 Overview Synthetic data (or “simulated data”, “imputed data”) is data that has been generated from an existing dataset. It bears the same statistical properties of the original dataset but does not give insight into identifying the original data. Synthetic data can be used for building models, conducting research, and more. Both statistical simulation and computational derivation can be used to generate s ynthetic data. 5.5.2 About SDV SDV is an open source project that uses uses probabilistic graphical modeling and deep learning to create synthetic data based off of the given dataset. Unique hierarchical generative modeling and recursive sampling allows for different structures of data to be used and generated. SDV is a great tool to use to generate synthetic data when you don’t have enough d ata or if you need some data to test your models with. 5.5.2.1 How does SDV work? SDV contains several models and methods for your use in generating synthetic data. 5.5.2.2 Which model should I choose? If you are generating tabular data with many continuous or quantifiable features, it is reccomended that you use the GaussianCopula or the TVAE models. The CTGAN model has also performed well for tabular data when the original data is mostly categorical or nominal. If you are generating synthetic images, it is reccomended that you use the CTGAN or CopulaGAN models. SDV is not limited to just generating tabular data or image data either. Information on how to generate timeseries data can be found in the SDV documentation. 5.5.3 SDV Example: Generating COVID-19 Variants 5.5.3.1 Environment Set-up Before installing SDV, it is reccomended that you have available other data science libraries that will faciliate your use of the tool. In this example, an Anaconda environment to host my Jupyter Notebook is used. To find out how you can also set-up your general data science environment, please see the DataLab Install Guide Toolkit. 5.5.3.2 SDV Set-up SDV can be installed via PyPi just like any other Python library served in a similar manner. 5.5.3.3 Data For this toolkit, we will be generating additional COVID-19 variants based off of the thousands that already exist as of 2022. We will be using this dataset located in Google Drive. 5.5.3.4 Code Tip: I like to import warnings when using SDV in Jupyter notebook so that I can ignore any warnings that pop-up. Remember that SDV is an open source project and it is actively being updated by community members. import warnings warnings.filterwarnings(‘ignore’) First, import the libraries Pandas and the CopulaGAN model from SDV. import pandas as pd from sdv.tabular import CopulaGAN I saved the aforementioned dataset as “variants.csv” in my local filesystem. I will use Pandas to read the data into the dataframe named data and then see what that dataframe looks like. data = pd.read_csv(&quot;variants.csv&quot;) data.head(20) Next, create an instance of the model that you plan to use (CopulaGAN, in this example). After you create an instance of the model, you can fit the data to the model. model = CopulaGAN() model.fit(data) Now that you have a fitted model, you can specify how much synthetic data you want to generate from the model fitted to your original data. new_data = model.sample(200) Let’s view some of the new data: new_data.head() Interesting! We were able to generate some “new” COVID-19 variants. 5.5.3.4.1 Evaluating our results We can evaluate how similar our synthetic data is to the original data by using the evualtion framework that comes with SDV: from sdv.evaluation import evaluate We will use statistical measures of efficacy including the Kolmogorov-Smirnov (KSTest) test to compare the distributions of continuous columns and the Chi-Squared (CSTest) test to compare the distributions of discrete columns. We can also use a detection metric such as LogisticDetection which evaluates how hard it is to distinguish the synthetic data from the real data by using a machine learning model. metrics = [&#39;KSTest&#39;, &#39;CSTest&#39;, &#39;LogisticDetection&#39;] Tip: You can find other evaluation metrics in SDV’s documentation here. Let’s run the evaluation framework with the metrics we selected. This is done by using the evaluate() function we just imported with the newly generated data (new_data) and the original data (data). We also include the metrics that were defined above. evaluate(new_data, data, aggregate=False, metrics=metrics) Tip: The evaluation framework can take quite a long time to run especially if you have a large amount of data! You can reduce the runtime of the evaluation framework by selecting only the evaluation metrics that you want to use. Otherwise, get a coffee and relax while it runs! Here are our results from running the evaluation framework: Hey, these are some pretty good scores! 5.5.4 SDV Repository &amp; Documentation More tutorials and details regarding the SDV library can be found by following the links below. The repository for SDV is found here. Further documentation for the SDV library can be found here. SDV has an active Slack community with people who can answer any questions you have about how SDV works or how to implement it in your research. The link to join the Slack community can be found in the documentation above. As of writing, the GUI is not available on the most recent release. You may want to check there as well, and download that if possible.↩︎ "]]
